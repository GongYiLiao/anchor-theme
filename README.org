goo#+title: ~anchor-theme-buffer-local~
#+author: Liāu, Kiong-Gē
#+email:  gongyi.liao@gmail.com



This package provides

- functions to apply an ~emacs~ *custom theme* to current buffer only
- a function to generate side-effect only functions as mode hooks 

#+CAPTION: Every buffer has it own theme
#+NAME: fig:Emacs-with-anchor-themes-0 
[[./Emacs-with-anchor-themes-0.png]]


* Functions and macro 

** ~anchor-theme-buffer-local~ 

   This function apply a theme to current buffer without affecting other buffers.

   The following example make ~tange~ theme effective in current buffer without
   changing any face settings in other buffers. 

   #+begin_src emacs-lisp

     (anchor-theme-buffer-local 'tango)

   #+end_src 

** ~anchor-theme-buffer-local~

   This macro generates functions those can setup mode-specific buffer
   appearance as well as turn on/off some  applicable features. 
    
   The following example shows how one can use this function to generate a
   mode hook function for ~emacs-lisp-mode~

   #+begin_src emacs-lisp

     (add-hook 'emacs-lisp-mode-hook
	       (anchor-theme-hook-gen 'adwaita
				      (show-paren-mode t)
				      (setq-local show-paren-style 'expression)
				      (electric-pair-local-mode t)))

   #+end_src 
    
** Other functions

*** ~anchor-theme-get-faces~

    This function extracts  ~theme-face~ from a custom theme

*** ~anchor-theme-spec-choose~

    This function detects what settings are applicable in a face specification
    like:

    #+begin_src emacs-lisp

      (theme-face default base16-default-light
		  ((((type graphic))
		    (:foreground "#383838" :background "#f8f8f8"))
		   (((min-colors 256))
		    (:foreground "white" :background "black"))
		   (t
		    (:foreground "white" :background "black"))))

    #+end_src 

    If the emacs process runs in a GUI environment, the first specification will
    be used as the ~(type graphic)~  requirement is satisified ; if it runs in 
    a tty terminal that only supports up to 16 colors, the third specification
    will be used due to even the second condition ~(min-colors 256)~ is not
    fulfilled. 
     
    Some themes may have some ~theme-face~ mis-specified like the following
    example, which more likely to be ~theme-value~ rather than ~theme-face~ 

    #+begin_src emacs-lisp

      (theme-face an-uncommon-face invalid-theme '(["#FFFFFA" "#AABBCC"]))

    #+end_src 

    If an invalid face specification is detected, this function will report an
    error and aborts any further execution of the function. 

     
* Limitations

  - +The ~anchor-theme-buffer-local~ currently does not support interactivefunction call yet+ 
  - This package can only process ~theme-face~. ~theme-value~, which should be
    only changed via customization interface and that is out of this package's
    scope
  - +This package does not work well with modes basde on ~emacs-modules~ such+
     +as [[https://github.com/akermu/emacs-libvterm][vterm]] using mode-hook mechanism to set themes. Interactively invoke+
     +~anchor-theme-buffer-local~ still works, but it requires manual+
     +operation for the time being.+  But setting ANSI color does not work in
     ~vterm~
  - This package currently does not work well with some add-on themes such as
    [[https://github.com/AnthonyDiGirolamo/airline-themes][airline-themes]]



* Etymology

  This package and its functions' ~anchor-theme~ name prefix is chosen as a 
  theme gets anchored on a buffer rather than makes the entire ~Emacs~ session
  looks monotonic.
   

  The name suffix ~-buffer-local~ is borrowed from [[https://github.com/vic/color-theme-buffer-local][color-theme-buffer-local]], 
  which I had used since ~Emacs~ version 26.1. It relies on ~flet~ for
  dynamic binding but the deprecation of ~flet~ in recent Emacs releases
  and development branches prevents it from working properly even with [[https://github.com/nicferrier/emacs-noflet][noflet]].
  However the most important factor is: it's now unmaintained. This package
  aims to solve the same problem ~color-theme-buffer-local~ aimed to solve but
  with less use of dynamic binding and without any dependency of third-party
  packages. 


   
* LICENSE

  The use of this package is granted under [[https://www.gnu.org/licenses/gpl-3.0.en.html][Free Software Foundation's GNU
  General Public License, Version 3]] (or newer). 

